// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name     String?  @db.VarChar(255)
  email    String   @unique @db.VarChar(255)
  password String   @db.VarChar(255)
  photoUrl String?  @db.VarChar(255)
  role     UserRole @default(User)

  // Relation fields
  projects   Project[]
  tasks      Task[]
  comments   Comment[]
  connection Connection[]
}

model Project {
  id          String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String          @db.VarChar(255)
  description String?         @db.Text
  isArchived  Boolean         @default(false) @db.Boolean
  type        ProjectType     @default(Personal)
  privacy     ProjectPrivacy  @default(Public)
  status      ProjectStatus   @default(NotStarted)
  priority    ProjectPriority @default(NotSet)
  tags        ProjectTags?

  userId String? @db.Uuid
  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt @db.Timestamp
  dueDate   DateTime  @db.Timestamp

  // Relation fields
  tasks       Task[]
  connections Connection[]
}

model Task {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String     @db.VarChar(255)
  description String?    @db.Text
  status      TaskStatus @default(ToDo)
  tags        TaskTags   @default(NotSet)

  projectId String?  @db.Uuid
  Project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId String? @db.Uuid
  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime  @default(now()) @db.Timestamp
  updatedAt DateTime? @updatedAt @db.Timestamp
  dueDate   DateTime? @db.Timestamp

  // Relation fields
  Comment Comment[]
}

model Comment {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  text String @db.Text

  taskId String? @db.Uuid
  task   Task?   @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId String? @db.Uuid
  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
}

model Connection {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  projectId String?  @db.Uuid
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId String? @db.Uuid
  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

// Enums are used to model a restricted group of values which help avoid mistakes and inconsistencies.
enum UserRole {
  User
  Admin
}

enum ProjectTags {
  React
  Node
  Express
  MongoDB
  JavaScript
  HTML
  CSS
}

enum ProjectPrivacy {
  Public
  Private
}

enum ProjectStatus {
  NotStarted
  InProgress
  Finished
}

enum ProjectPriority {
  NotSet
  Low
  Medium
  High
}

enum ProjectType {
  Personal
  Shared
}

enum TaskStatus {
  ToDo
  InProgress
  Backlog
}

enum TaskTags {
  NotSet
  Improvement
  Feedback
  Bug
}
